// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: proto/quiz.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "quiz";

export interface JoinRequest {
  username: string;
  roomId: string;
}

export interface CreateRoomRequest {
  username: string;
}

export interface Question {
  text: string;
  options: string[];
  correctOption: number;
}

export interface Player {
  username: string;
  score: number;
}

export interface GameState {
  state: GameState_State;
  roomId: string;
  players: Player[];
  currentQuestion: Question | undefined;
  questionNumber: number;
  message: string;
}

export enum GameState_State {
  WAITING = 0,
  IN_PROGRESS = 1,
  FINISHED = 2,
  UNRECOGNIZED = -1,
}

export function gameState_StateFromJSON(object: any): GameState_State {
  switch (object) {
    case 0:
    case "WAITING":
      return GameState_State.WAITING;
    case 1:
    case "IN_PROGRESS":
      return GameState_State.IN_PROGRESS;
    case 2:
    case "FINISHED":
      return GameState_State.FINISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GameState_State.UNRECOGNIZED;
  }
}

export function gameState_StateToJSON(object: GameState_State): string {
  switch (object) {
    case GameState_State.WAITING:
      return "WAITING";
    case GameState_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case GameState_State.FINISHED:
      return "FINISHED";
    case GameState_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AnswerRequest {
  username: string;
  roomId: string;
  answer: number;
}

export interface Empty {
}

function createBaseJoinRequest(): JoinRequest {
  return { username: "", roomId: "" };
}

export const JoinRequest: MessageFns<JoinRequest> = {
  encode(message: JoinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.roomId !== "") {
      writer.uint32(18).string(message.roomId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
    };
  },

  toJSON(message: JoinRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinRequest>, I>>(base?: I): JoinRequest {
    return JoinRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinRequest>, I>>(object: I): JoinRequest {
    const message = createBaseJoinRequest();
    message.username = object.username ?? "";
    message.roomId = object.roomId ?? "";
    return message;
  },
};

function createBaseCreateRoomRequest(): CreateRoomRequest {
  return { username: "" };
}

export const CreateRoomRequest: MessageFns<CreateRoomRequest> = {
  encode(message: CreateRoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRoomRequest {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: CreateRoomRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRoomRequest>, I>>(base?: I): CreateRoomRequest {
    return CreateRoomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRoomRequest>, I>>(object: I): CreateRoomRequest {
    const message = createBaseCreateRoomRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseQuestion(): Question {
  return { text: "", options: [], correctOption: 0 };
}

export const Question: MessageFns<Question> = {
  encode(message: Question, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    for (const v of message.options) {
      writer.uint32(18).string(v!);
    }
    if (message.correctOption !== 0) {
      writer.uint32(24).int32(message.correctOption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Question {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.options.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.correctOption = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Question {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => globalThis.String(e)) : [],
      correctOption: isSet(object.correctOption) ? globalThis.Number(object.correctOption) : 0,
    };
  },

  toJSON(message: Question): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.options?.length) {
      obj.options = message.options;
    }
    if (message.correctOption !== 0) {
      obj.correctOption = Math.round(message.correctOption);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Question>, I>>(base?: I): Question {
    return Question.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Question>, I>>(object: I): Question {
    const message = createBaseQuestion();
    message.text = object.text ?? "";
    message.options = object.options?.map((e) => e) || [];
    message.correctOption = object.correctOption ?? 0;
    return message;
  },
};

function createBasePlayer(): Player {
  return { username: "", score: 0 };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.username = object.username ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseGameState(): GameState {
  return { state: 0, roomId: "", players: [], currentQuestion: undefined, questionNumber: 0, message: "" };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.roomId !== "") {
      writer.uint32(18).string(message.roomId);
    }
    for (const v of message.players) {
      Player.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.currentQuestion !== undefined) {
      Question.encode(message.currentQuestion, writer.uint32(34).fork()).join();
    }
    if (message.questionNumber !== 0) {
      writer.uint32(40).int32(message.questionNumber);
    }
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.players.push(Player.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currentQuestion = Question.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.questionNumber = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      state: isSet(object.state) ? gameState_StateFromJSON(object.state) : 0,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => Player.fromJSON(e)) : [],
      currentQuestion: isSet(object.currentQuestion) ? Question.fromJSON(object.currentQuestion) : undefined,
      questionNumber: isSet(object.questionNumber) ? globalThis.Number(object.questionNumber) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = gameState_StateToJSON(message.state);
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.players?.length) {
      obj.players = message.players.map((e) => Player.toJSON(e));
    }
    if (message.currentQuestion !== undefined) {
      obj.currentQuestion = Question.toJSON(message.currentQuestion);
    }
    if (message.questionNumber !== 0) {
      obj.questionNumber = Math.round(message.questionNumber);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState();
    message.state = object.state ?? 0;
    message.roomId = object.roomId ?? "";
    message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
    message.currentQuestion = (object.currentQuestion !== undefined && object.currentQuestion !== null)
      ? Question.fromPartial(object.currentQuestion)
      : undefined;
    message.questionNumber = object.questionNumber ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseAnswerRequest(): AnswerRequest {
  return { username: "", roomId: "", answer: 0 };
}

export const AnswerRequest: MessageFns<AnswerRequest> = {
  encode(message: AnswerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.roomId !== "") {
      writer.uint32(18).string(message.roomId);
    }
    if (message.answer !== 0) {
      writer.uint32(24).int32(message.answer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.answer = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      answer: isSet(object.answer) ? globalThis.Number(object.answer) : 0,
    };
  },

  toJSON(message: AnswerRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.answer !== 0) {
      obj.answer = Math.round(message.answer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnswerRequest>, I>>(base?: I): AnswerRequest {
    return AnswerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnswerRequest>, I>>(object: I): AnswerRequest {
    const message = createBaseAnswerRequest();
    message.username = object.username ?? "";
    message.roomId = object.roomId ?? "";
    message.answer = object.answer ?? 0;
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

export type QuizGameService = typeof QuizGameService;
export const QuizGameService = {
  joinRoom: {
    path: "/quiz.QuizGame/JoinRoom",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: JoinRequest) => Buffer.from(JoinRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => JoinRequest.decode(value),
    responseSerialize: (value: GameState) => Buffer.from(GameState.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GameState.decode(value),
  },
  createRoom: {
    path: "/quiz.QuizGame/CreateRoom",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: CreateRoomRequest) => Buffer.from(CreateRoomRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateRoomRequest.decode(value),
    responseSerialize: (value: GameState) => Buffer.from(GameState.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GameState.decode(value),
  },
  submitAnswer: {
    path: "/quiz.QuizGame/SubmitAnswer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AnswerRequest) => Buffer.from(AnswerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AnswerRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface QuizGameServer extends UntypedServiceImplementation {
  joinRoom: handleServerStreamingCall<JoinRequest, GameState>;
  createRoom: handleServerStreamingCall<CreateRoomRequest, GameState>;
  submitAnswer: handleUnaryCall<AnswerRequest, Empty>;
}

export interface QuizGameClient extends Client {
  joinRoom(request: JoinRequest, options?: Partial<CallOptions>): ClientReadableStream<GameState>;
  joinRoom(request: JoinRequest, metadata?: Metadata, options?: Partial<CallOptions>): ClientReadableStream<GameState>;
  createRoom(request: CreateRoomRequest, options?: Partial<CallOptions>): ClientReadableStream<GameState>;
  createRoom(
    request: CreateRoomRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<GameState>;
  submitAnswer(
    request: AnswerRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  submitAnswer(
    request: AnswerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  submitAnswer(
    request: AnswerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const QuizGameClient = makeGenericClientConstructor(QuizGameService, "quiz.QuizGame") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QuizGameClient;
  service: typeof QuizGameService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
